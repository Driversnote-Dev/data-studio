/** @jsx jsx */
import { css, Global, jsx } from '@emotion/core';
import * as dscc from '@google/dscc';
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import MainComponent from './components/MainComponent';
import { ErrorBoundary } from './ErrorBoundary';
import { DSData } from './types';
import { ErrorProvider } from './components/ErrorComponent';

const LOCAL = process.env.NODE_ENV !== 'production';

// bind our app to html el generated by webpack
const setup = () => {
  const mainDiv = document.createElement('div');
  mainDiv.id = 'app';
  document.body.appendChild(mainDiv);

  ReactDOM.render(
    <ErrorBoundary>
      <AppComponent />
    </ErrorBoundary>,
    document.getElementById('app')
  );
};

// tslint:disable-next-line:no-empty-interface
interface State extends Partial<DSData> {
  count: number;
}

class AppComponent extends React.Component<Record<never, never>, State> {
  public readonly state: Readonly<State> = { count: 0 };
  protected unsubscribe?: () => any;
  protected debug = false;

  constructor(props: any) {
    super(props);
    this.handleDataUpdate.bind(this);
  }

  public componentDidMount() {
    this.handleDataUpdate({
      style: {
        debug: {
          value: true,
        },
      },
    } as any);

    if (LOCAL) {
      // tslint:disable-next-line:no-console
      console.log(
        '%cWARNING[class MainComponent][method componentDidMount] :: app is in local/dev mode',
        'color: orange'
      );
      // While doing local development just use mock data. To get this when first starting you can do
      // console.log in the `handleDataUpdate` when deployed to DataStudio.
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      const local = require('./localMessage.js');
      this.handleDataUpdate(local.message);
    } else {
      if (this.debug) {
        console.log(
          '%cINFO[class MainComponent][method] componentDidMount :: app is in production mod v2',
          'color: blue'
        );
      }

      this.unsubscribe = dscc.subscribeToData(
        (data) => {
          console.log('%cgot data from dscc', 'color: green');
          this.handleDataUpdate(data as any);
        },
        {
          transform: dscc.objectTransform,
        }
      );
    }
  }

  public componentWillUnmount() {
    if (this.unsubscribe) {
      if (this.debug) {
        // tslint:disable-next-line:no-console
        console.log(
          '%cDEBUG[class MainComponent][method componentWillUnmount][action unsubscribing]',
          'color: orange'
        );
      }
      this.unsubscribe();
    }
  }

  public handleDataUpdate(data: State) {
    // tslint:disable-next-line:no-console
    if (this.isDebug(data)) {
      // tslint:disable-next-line:no-console
      console.log(
        '%cDEBUG[class MainComponent][method handleDataUpdate][action setState]',
        'color: orange'
      );
      // tslint:disable-next-line:no-console
      console.log(JSON.parse(JSON.stringify(data)));

      this.debug = true;
    }

    // legacy transforms
    if (data.style?.isCurrency?.value) {
      data.style.valueType.value = 'currency';
    }

    const chartType =
      data.style?.format?.value ?? data.style?.format?.defaultValue;

    if (chartType === 'percentage') {
      data.style.valueType.value = 'percent';
    }

    this.setState({ ...data, count: this.state.count });
  }

  public isDebug(data: State): boolean {
    return !!(data && data.style && data.style.debug && data.style.debug.value);
  }

  public render() {
    const fontFamily =
      this.state.style?.fontFamily?.value ||
      this.state.style?.fontFamily?.defaultValue;

    const styles = css`
      * {
        font-family: ${fontFamily}, Helvetica, Arial, sans-serif;
      }

      html,
      body {
        height: 100%;
      }

      #app {
        display: flex;
        height: 100%;
        position: relative;
      }
    `;

    let component = <div>Loading</div>;

    // Internally Google data studio uses post Message to send data to the web app. When the first render
    // occurs we may have the data yet, if that is the case just render null.
    if (stateGuard(this.state)) {
      const { tables, style, fields, theme } = this.state;
      component = (
        <MainComponent
          tables={tables}
          style={style}
          fields={fields}
          theme={theme}
        />
      );
    }

    return (
      <React.Fragment>
        <Global styles={styles} />
        <ErrorProvider>{component}</ErrorProvider>
      </React.Fragment>
    );
  }
}

const stateGuard = (state: Partial<State>): state is State => {
  return !!(state && state.style && state.tables && state.fields);
};

setup();
